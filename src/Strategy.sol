// SPDX-License-Identifier: AGPL-3.0
// Feel free to change the license, but this is what we use

pragma solidity ^0.8.12;
pragma experimental ABIEncoderV2;

// These are the core Yearn libraries
import {BaseStrategy, StrategyParams} from "@yearnvaults/contracts/BaseStrategy.sol";

import {Address} from "@openzeppelin/contracts/utils/AddressUpgradeable.sol";
import {IERC20} from "@openzeppelin/contracts/token/ERC20/IERC20Upgradeable.sol";
import {SafeERC20} from "@openzeppelin/contracts/token/ERC20/utils/SafeERC20Upgradeable.sol";

import "./interfaces/niftyapes/INiftyApes.sol";

contract Strategy is BaseStrategy {
    using SafeERC20 for IERC20;
    using Address for address;

    INiftyApes public constant NIFTYAPES = address(0);
    address public constant BAYC = 0xBC4CA0EdA7647A8aB7C2061c2E118A18a936f13D;
    address public constant XBAYC = 0xEA47B64e1BFCCb773A0420247C0aa0a3C1D2E5C5;
    address public constant WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;
    address public constant SUSHILP = 0xD829dE54877e0b66A2c3890b702fa5Df2245203E;
    address public constant CDAI = 0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643;
    uint256 public constant PRECISION = 1e18;

    uint256 public lastFloorPrice;
    uint256 public lastOfferDate;
    uint256 public durationOfferOpen;


    uint256 public allowedDelta = 1e16; // 1% based on PRECISION
    uint256 public collatRatio = 25 * 1e16; // 25%
    uint96 public interestRatePerSecond = 1; // in basis points

    uint256 numOffers;
    ILendingStructs.Offer public offer;
    mapping (uint256 => ILendingStructs.Offer) public offers;
    mapping (uint256 => bytes32) offerHashes;

    // TODO: will need to store the offers outstanding ->  timestamp of offer, offer hash
    // TODO: Needs to rescind offers --> how to make the rescinding appear profitable to a keeper



    // https://github.com/yearn/yearn-vaults/blob/main/contracts/BaseStrategy.sol
    constructor(address _vault) public BaseStrategy(_vault) {
        // You can set these parameters on deployment to whatever you want
        // maxReportDelay = 6300;  // The maximum number of seconds between harvest calls
        // profitFactor = 100; // The minimum multiple that `callCost` must be above the credit/profit to be "justifiable";
        // debtThreshold = 0; // Use this to adjust the threshold at which running a debt causes harvest trigger
        
        offer.creator = address(this);
        offer.duration = 
        offer.expiration = 
        offer.fixedTerms = true;
        offer.floorTerm = true;
        offer.lenderOffer = true;
        offer.nftContractAddress = BAYC;
        offer.asset = CDAI; // TODO: is this correct
        offer.interestRatePerSecond = 1;
    }

    // ******** OVERRIDE THESE METHODS FROM BASE CONTRACT ************

    function name() external view override returns (string memory) {
        return "StrategyNiftyApesBAYC";
    }

    function estimatedTotalAssets() public view override returns (uint256) {
        // TODO: Build a more accurate estimate using the value of all positions in terms of `want`
        return want.balanceOf(address(this));
    }

    function prepareReturn(uint256 _debtOutstanding)
        internal
        override
        returns (
            uint256 _profit,
            uint256 _loss,
            uint256 _debtPayment
        )
    {
        // TODO: Do stuff here to free up any returns back into `want`
        // NOTE: Return `_profit` which is value generated by all positions, priced in `want`
        // NOTE: Should try to free up at least `_debtOutstanding` of underlying position
    }

    function adjustPosition(uint256 _debtOutstanding) internal override {
        // TODO: Do something to invest excess `want` tokens (from the Vault) into your positions
        // NOTE: Try to adjust positions so that `_debtOutstanding` can be freed up on *next* harvest (not immediately)

        // TODO: fetch floor price based on SLP
        uint128 floorPrice = calculateFloor();


        // Remove outstanding offers that too high / have expired
        if (floorPrice < lastFloorPrice) {
        uint128 lastAmountLoaned = offers[numOffers].amount;
        uint32 expiration = offers[numOffers].expiration;

            while (
                (lastAmountLoaned > floorPrice || uint128(block.timestamp) > expiration)
            ) {
                // Remove offer - TODO: is this needed or can it just stay there?
                NIFTYAPES.doRemoveOffer(BAYC, 0, offerHashes[numOffers], true);

                delete offers[numOffers--];
                lastAmountLoaned = offers[numOffers].amount;
                expiration = offers[numOffers].expiration;
            }
        }

        // TODO: set offer values

        lastFloorPrice = floorPrice;
        lastOfferDate = block.timestamp;
    }

    function liquidatePosition(uint256 _amountNeeded)
        internal
        override
        returns (uint256 _liquidatedAmount, uint256 _loss)
    {
        // TODO: Do stuff here to free up to `_amountNeeded` from all positions back into `want`
        // NOTE: Maintain invariant `want.balanceOf(this) >= _liquidatedAmount`
        // NOTE: Maintain invariant `_liquidatedAmount + _loss <= _amountNeeded`

        uint256 totalAssets = want.balanceOf(address(this));
        if (_amountNeeded > totalAssets) {
            _liquidatedAmount = totalAssets;
            unchecked {
                _loss = _amountNeeded - totalAssets;
            }
        } else {
            _liquidatedAmount = _amountNeeded;
        }
    }

    function liquidateAllPositions() internal override returns (uint256) {
        // TODO: Liquidate all positions and return the amount freed.
        return want.balanceOf(address(this));

        // TODO: call withdrawERC20()


        // TODO: remove outstanding offers
        while (numOffers > 0) {
            delete offers[numOffers--];
        }

        // NOTE: needs to be recalled when outstanding loans expire
    }

    // NOTE: Can override `tendTrigger` and `harvestTrigger` if necessary

    function prepareMigration(address _newStrategy) internal override {
        // TODO: Transfer any non-`want` tokens to the new strategy
        // NOTE: `migrate` will automatically forward all `want` in this strategy to the new one
    }

    // Override this to add all tokens/tokenized positions this contract manages
    // on a *persistent* basis (e.g. not just for swapping back to want ephemerally)
    // NOTE: Do *not* include `want`, already included in `sweep` below
    function protectedTokens()
        internal
        view
        override
        returns (address[] memory)
    {
        address[] memory protected = new address[](3);
        protected[0] = XBAYC;
        protected[1] = WETH;
        protected[2] = SUSHILP;
        return protected;
    }

    /**
     * @notice
     *  Provide an accurate conversion from `_amtInWei` (denominated in wei)
     *  to `want` (using the native decimal characteristics of `want`).
     * @dev
     *  Care must be taken when working with decimals to assure that the conversion
     *  is compatible. As an example:
     *
     *      given 1e17 wei (0.1 ETH) as input, and want is USDC (6 decimals),
     *      with USDC/ETH = 1800, this should give back 1800000000 (180 USDC)
     *
     * @param _amtInWei The amount (in wei/1e-18 ETH) to convert to `want`
     * @return The amount in `want` of `_amtInEth` converted to `want`
     **/
    function ethToWant(uint256 _amtInWei)
        public
        view
        virtual
        override
        returns (uint256)
    {
        // TODO create an accurate price oracle
        return _amtInWei;
    }


    // ******************************************************************************
    //                                  NEW METHODS
    // ******************************************************************************

    // NOTE: this isn't exactly the spot price NFTx offers but it's "good enough"
    function calculateFloor() public view returns (uint256 floorInEth) {
        // Fetch current pool of sushi LP
        // balance of xBAYC
        uint256 wethBalance = IERC20(WETH).balanceOf(SUSHILP);
        uint256 xbaycBalance = IERC20(XBAYC).balanceOf(SUSHILP);
        floorInEth = PRECISION * wethBalance / xbaycBalance;
    }



    function calculateInterestRateAnnually() public view returns (uint256 rate) {
    }

    /*

    TODO: how to track loans made on a specific offer? - right now it's event based
    

    - A strategiest would configure:
        - Initial terms when strategy goes live
        - constructor arguments

    - Our "want" token to stack is DAI/USDC
    
    TODO: wait to hear from yearn
    - can a keeper pass an argument into tend()
    - can a keeper make an external API call
    */
}